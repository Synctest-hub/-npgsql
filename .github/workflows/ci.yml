name: Build

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        dotnet: [ '3.0.100' ]
        pg_major: [ 11, 10 ]
        include:
          - pg_major: 11
            edb_version: '11.4-2'
            postgis_version: '2.5.3'
          - pg_major: 10
            edb_version: '10.9-2'
            postgis_version: '2.5.3'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Start PostgreSQL ${{ matrix.pg_major }} (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: docker run --detach --name postgresql -p 5432:5432 npgsql/postgres:${{ matrix.pg_major }}
        shell: bash

      - name: Start PostgreSQL ${{ matrix.pg_major }} (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          # Install PostgreSQL
          curl -o pgsql.zip -L https://get.enterprisedb.com/postgresql/postgresql-${{ matrix.edb_version }}-windows-x64-binaries.zip
          unzip pgsql.zip -x 'pgsql/include/**' 'pgsql/doc/**' 'pgsql/pgAdmin 4/**' 'pgsql/StackBuilder/**'

          # Match Npgsql CI Docker image and stash one level up
          cp {$GITHUB_WORKSPACE/.build/docker,pgsql}/server.crt
          cp {$GITHUB_WORKSPACE/.build/docker,pgsql}/server.key

          # Install PostGIS
          POSTGIS_FILE="postgis-bundle-pg${{ matrix.pg_major }}-${{ matrix.postgis_version }}x64"
          curl -o postgis.zip -L https://download.osgeo.org/postgis/windows/pg${{ matrix.pg_major }}/${POSTGIS_FILE}.zip
          unzip postgis.zip -d postgis
          cp -a postgis/$POSTGIS_FILE/. pgsql/

          # Start PostgreSQL
          pgsql/bin/initdb -D pgsql/PGDATA -E UTF8 -U postgres
          pgsql/bin/pg_ctl -D pgsql/PGDATA -l logfile -o '-c max_prepared_transactions=10 -c ssl=true -c ssl_cert_file=../server.crt -c ssl_key_file=../server.key' start

          # Configure test account
          pgsql/bin/psql -U postgres -c "CREATE ROLE npgsql_tests SUPERUSER LOGIN PASSWORD 'npgsql_tests'"
          pgsql/bin/psql -U postgres -c "CREATE DATABASE npgsql_tests OWNER npgsql_tests"
        shell: bash

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.0.2 # Issues with DOTNET_ROOT
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Test (EFCore.PG.Tests)
        run: dotnet test test/EFCore.PG.Tests --configuration Debug
        shell: bash

      - name: Test (EFCore.PG.FunctionalTests)
        run: dotnet test test/EFCore.PG.FunctionalTests --configuration Debug
        shell: bash

      - name: Test (EFCore.PG.Plugins.FunctionalTests)
        run: dotnet test test/EFCore.PG.Plugins.FunctionalTests --configuration Debug
        shell: bash

  publish:
    needs: build

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Pack NuGet packages (CI versions)
        run: |
          VERSION_SUFFIX="ci.$(date -u +%Y%m%dT%H%M%S)+sha.${GITHUB_SHA:0:9}"
          dotnet pack src/EFCore.PG          --configuration Release --output nupkgs/ci --version-suffix $VERSION_SUFFIX
          dotnet pack src/EFCore.PG.NodaTime --configuration Release --output nupkgs/ci --version-suffix $VERSION_SUFFIX
          dotnet pack src/EFCore.PG.NTS      --configuration Release --output nupkgs/ci --version-suffix $VERSION_SUFFIX
        shell: bash

      - name: Pack NuGet packages (Release versions)
        run: |
          dotnet pack src/EFCore.PG          --configuration Release --output nupkgs/release
          dotnet pack src/EFCore.PG.NodaTime --configuration Release --output nupkgs/release
          dotnet pack src/EFCore.PG.NTS      --configuration Release --output nupkgs/release
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: EFCore.PG+sha.${{ github.sha }}
          path: nupkgs

      - name: Publish packages to MyGet (unstable)
        if: startsWith(github.ref, 'refs/heads/hotfix/') == false
        env:
          TOKEN: ${{ secrets.MYGET_FEED_VNEXT }}
          SOURCE: https://www.myget.org/F/npgsql-unstable/api/v2/package
          SYMBOL: https://www.myget.org/F/npgsql-unstable/symbols/api/v2/package
        run: |
          dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.*.nupkg                  --api-key $TOKEN --source $SOURCE --symbol-source $SYMBOL
          dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.*.nupkg --api-key $TOKEN --source $SOURCE --symbol-source $SYMBOL
          dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.*.nupkg         --api-key $TOKEN --source $SOURCE --symbol-source $SYMBOL
        shell: bash

      - name: Publish packages to MyGet (stable)
        if: startsWith(github.ref, 'refs/heads/hotfix/') == true
        env:
          TOKEN: ${{ secrets.MYGET_FEED_PATCH }}
          SOURCE: https://www.myget.org/F/npgsql/api/v2/package
          SYMBOL: https://www.myget.org/F/npgsql/symbols/api/v2/package
        run: |
          dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.*.nupkg                  --api-key $TOKEN --source $SOURCE --symbol-source $SYMBOL
          dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.*.nupkg --api-key $TOKEN --source $SOURCE --symbol-source $SYMBOL
          dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.*.nupkg         --api-key $TOKEN --source $SOURCE --symbol-source $SYMBOL
        shell: bash

#      - name: Publish packages to GitHub Package Registry
#        env:
#          TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SOURCE: https://nuget.pkg.github.com/npgsql/index.json
#        run: |
#          # dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.*.nupkg                  --api-key $TOKEN --source $SOURCE --symbol-source $SOURCE
#          # dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.*.nupkg --api-key $TOKEN --source $SOURCE --symbol-source $SOURCE
#          # dotnet nuget push nupkgs/ci/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.*.nupkg         --api-key $TOKEN --source $SOURCE --symbol-source $SOURCE
#
#          # GPR has issues with API keys and `dotnet nuget` doesn't support `sources`...
#          # See: https://github.com/NuGet/Home/issues/8580
#          cd nupkgs/ci
#          curl -o nuget -L https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
#          ./nuget sources add -Name "GitHub" -Source $SOURCE -UserName npgsql -Password $TOKEN
#          ./nuget push "Npgsql.EntityFrameworkCore.PostgreSQL.*.nupkg"                  -Source "GitHub"
#          ./nuget push "Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.*.nupkg" -Source "GitHub"
#          ./nuget push "Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.*.nupkg"         -Source "GitHub"
#        shell: bash
#
#      - name: Publish packages (NuGet)
#        if: startsWith(github.ref, 'refs/heads/master/')
#        run: dotnet nuget push nupkgs/ci/*.nupkg
#        shell: bash
