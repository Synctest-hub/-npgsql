name: 2.0.0-ci.$(Date:yyyyMMdd).$(Rev:r)
variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NoPackageAnalysis: true  # Suppresses warning about SemVer 2.0.0 version suffixes when packing
  CI_VERSION: $(Build.BuildNumber) # Equal to the 'name' field above.
jobs:
- job: Linux
  pool:
    vmImage: ubuntu-16.04
  steps:
  - bash: sudo sh .build/setup_postgres.sh
    displayName: 'Start PostgreSQL'
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'pack'
      configuration: 'Release'
      packagesToPack: 'src/**/*.csproj'
      projects: |
        src/EFCore.PG/EFCore.PG.csproj
        src/EFCore.PG.NodaTime/EFCore.PG.NodaTime.csproj
        src/EFCore.PG.NTS/EFCore.PG.NTS.csproj
      verbosityPack: 'normal'
      versionEnvVar: 'CI_VERSION'
      versioningScheme: 'byEnvVar'
  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: 'test'
      configuration: 'Debug'
      projects: |
        test/EFCore.PG.Tests/EFCore.PG.Tests.csproj
        test/EFCore.PG.Plugins.FunctionalTests/EFCore.PG.Plugins.FunctionalTests.csproj
        test/EFCore.PG.FunctionalTests/EFCore.PG.FunctionalTests.csproj
      publishTestResults: true
- job: Windows
  pool:
    vmImage: vs2017-win2016
  steps:
  - powershell: .build/set_version.ps1
    displayName: 'Set version variables'
  - powershell: .build/setup_postgres.ps1
    displayName: 'Start PostgreSQL'
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'pack'
      configuration: 'Release'
      packagesToPack: 'src/**/*.csproj'
      projects: |
        src/EFCore.PG/EFCore.PG.csproj
        src/EFCore.PG.NodaTime/EFCore.PG.NodaTime.csproj
        src/EFCore.PG.NTS/EFCore.PG.NTS.csproj
      verbosityPack: 'normal'
      versionEnvVar: 'CI_VERSION'
      versioningScheme: 'byEnvVar'
  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: 'test'
      configuration: 'Debug'
      projects: |
        test/EFCore.PG.Tests/EFCore.PG.Tests.csproj
        test/EFCore.PG.Plugins.FunctionalTests/EFCore.PG.Plugins.FunctionalTests.csproj
        test/EFCore.PG.FunctionalTests/EFCore.PG.FunctionalTests.csproj
      publishTestResults: true
  - powershell: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg -s https://www.myget.org/F/npgsql/api/v2/package
    displayName: 'Publish to MyGet (stable)'
    condition: and(succeeded(), eq(variables.publish_myget_stable, 'true'))
  - powershell: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg -s https://www.myget.org/F/npgsql-unstable/api/v2/package
    displayName: 'Publish to MyGet (unstable)'
    condition: and(succeeded(), eq(variables.publish_myget_unstable, 'true'))

#  - task: DotNetCoreCLI@2
#    displayName: 'Publish to MyGet (unstable)'
#    inputs:
#      command: push
#      condition: and(succeeded(), eq(variables.publish_myget_unstable, 'true'))
#      nuGetFeedType: 'external'
#      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
#      publishFeedCredentials: 'https://www.myget.org/F/npgsql-unstable/api/v2/package'
#  - task: DotNetCoreCLI@2
#    displayName: 'Publish to MyGet (stable)'
#    inputs:
#      command: push
#      condition: and(succeeded(), eq(variables.publish_myget_stable, 'true'))
#      nuGetFeedType: 'external'
#      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
#      publishFeedCredentials: 'https://www.myget.org/F/npgsql/api/v2/package'